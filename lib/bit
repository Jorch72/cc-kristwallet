--BitLib
--Intended for use with Krist.
local MOD = 2^32
local MODM = MOD-1
local function memoize(f)
  local mt = {}
  local t = setmetatable({}, mt)
  function mt:__index(k)
    local v = f(k)
    t[k] = v
    return v
  end
  return t
end
local function make_bitop_uncached(t, m)
  local function bitop(a, b)
    local res,p = 0,1
    while a ~= 0 and b ~= 0 do
      local am, bm = a % m, b % m
      res = res + t[am][bm] * p
      a = (a - am) / m
      b = (b - bm) / m
      p = p*m
    end
    res = res + (a + b) * p
    return res
  end
  return bitop
end
local function make_bitop(t)
  local op1 = make_bitop_uncached(t,2^1)
  local op2 = memoize(function(a) return memoize(function(b) return op1(a, b) end) end)
  return make_bitop_uncached(op2, 2 ^ (t.n or 1))
end
local bxor1 = make_bitop({[0] = {[0] = 0,[1] = 1}, [1] = {[0] = 1, [1] = 0}, n = 4})
local function bxor(a, b, c, ...)
  local z = nil
  if b then
    a = a % MOD
    b = b % MOD
    z = bxor1(a, b)
    if c then z = bxor(z, c, ...) end
    return z
  elseif a then return a % MOD
  else return 0 end
end
local function band(a, b, c, ...)
  local z
  if b then
    a = a % MOD
    b = b % MOD
    z = ((a + b) - bxor1(a,b)) / 2
    if c then z = bit32_band(z, c, ...) end
    return z
  elseif a then return a % MOD
  else return MODM end
end
local function bnot(x) return (-1 - x) % MOD end
local function rshift1(a, disp)
  if disp < 0 then return lshift(a,-disp) end
  return math.floor(a % 2 ^ 32 / 2 ^ disp)
end
local function rshift(x, disp)
  if disp > 31 or disp < -31 then return 0 end
  return rshift1(x % MOD, disp)
end
local function lshift(a, disp)
  if disp < 0 then return rshift(a,-disp) end
  return (a * 2 ^ disp) % 2 ^ 32
end
local function rrotate(x, disp)
  x = x % MOD
  disp = disp % 32
  local low = band(x, 2 ^ disp - 1)
  return rshift(x, disp) + lshift(low, 32 - disp)
end
